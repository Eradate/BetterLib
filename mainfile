local library = {}
library.__index = library

local function createInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

function library.new(titleText)
    local lib = setmetatable({}, library)
    local screenGui = createInstance("ScreenGui", {Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")})

    local mainFrame = createInstance("Frame", {
        Size = UDim2.new(0, 300, 0, 400),
        Position = UDim2.new(0.5, -150, 0.5, -200),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        Parent = screenGui,
        Draggable = true,
        Active = true,
        ClipsDescendants = true
    })
    createInstance("UICorner", {CornerRadius = UDim.new(0, 10), Parent = mainFrame})

    local titleBar = createInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Parent = mainFrame
    })

    local titleLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        Text = titleText or "Title",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Parent = titleBar
    })

    local closeButton = createInstance("TextButton", {
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -30, 0, 0),
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 0, 0),
        BackgroundTransparency = 1,
        Parent = titleBar
    })
    closeButton.MouseButton1Click:Connect(function() screenGui:Destroy() end)

    local tabBar = createInstance("ScrollingFrame", {
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 30),
        CanvasSize = UDim2.new(0, 0, 0, 30),
        ScrollBarThickness = 8,
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Parent = mainFrame
    })

    local tabs = {}
    local tabButtons = {}

    function lib:addTab(name)
        local tabContentFrame = createInstance("ScrollingFrame", {
            Size = UDim2.new(1, 0, 1, -60),
            Position = UDim2.new(0, 0, 0, 60),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 8,
            BackgroundTransparency = 1,
            ClipsDescendants = true,
            Parent = mainFrame,
            Visible = false
        })

        local tabButton = createInstance("TextButton", {
            Size = UDim2.new(0, 100, 1, 0),
            Position = UDim2.new(#tabs * 0.3, 0, 0, 0),
            Text = name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundColor3 = Color3.fromRGB(60, 60, 60),
            Parent = tabBar
        })
        tabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(tabs) do
                tab.Visible = false
            end
            tabContentFrame.Visible = true
        end)

        local layout = Instance.new("UIListLayout", tabContentFrame)
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Padding = UDim.new(0, 5)

        table.insert(tabs, tabContentFrame)
        table.insert(tabButtons, tabButton)

        -- Update the tab bar canvas size to accommodate new tabs
        tabBar.CanvasSize = UDim2.new(0, 100 * #tabs, 0, 30)

        return tabContentFrame
    end

    function lib:addDropdown(tab, options)
        -- Add dropdown to specified tab
        -- Implementation remains the same
    end

    function lib:addLabel(tab, text)
        local label = createInstance("TextLabel", {
            Size = UDim2.new(1, 0, 0, 30),
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Parent = tab
        })
        tab.CanvasSize = UDim2.new(0, 0, 0, tab.CanvasSize.Y.Offset + 35)
        return label
    end

    function lib:addToggle(tab, text, callback)
        local toggle = createInstance("TextButton", {
            Size = UDim2.new(1, 0, 0, 30),
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Parent = tab
        })
        local toggled = false
        toggle.MouseButton1Click:Connect(function()
            toggled = not toggled
            callback(toggled)
        end)
        tab.CanvasSize = UDim2.new(0, 0, 0, tab.CanvasSize.Y.Offset + 35)
        return toggle
    end

    function lib:addTextbox(tab, placeholder, callback)
        local textbox = createInstance("TextBox", {
            Size = UDim2.new(1, 0, 0, 30),
            PlaceholderText = placeholder,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Parent = tab
        })
        textbox.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                callback(textbox.Text)
            end
        end)
        tab.CanvasSize = UDim2.new(0, 0, 0, tab.CanvasSize.Y.Offset + 35)
        return textbox
    end

    function lib:addButton(tab, text, callback)
        local button = createInstance("TextButton", {
            Size = UDim2.new(1, 0, 0, 30),
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Parent = tab
        })
        button.MouseButton1Click:Connect(function()
            callback()
        end)
        tab.CanvasSize = UDim2.new(0, 0, 0, tab.CanvasSize.Y.Offset + 35)
        return button
    end

    -- Make the mainFrame draggable
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    return lib
end

return library
